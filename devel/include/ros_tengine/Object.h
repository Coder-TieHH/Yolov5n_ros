// Generated by gencpp from file ros_tengine/Object.msg
// DO NOT EDIT!


#ifndef ROS_TENGINE_MESSAGE_OBJECT_H
#define ROS_TENGINE_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_tengine/Rectangle.h>

namespace ros_tengine
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : header()
    , boundingbox()
    , label()
    , probability(0.0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , boundingbox(_alloc)
    , label(_alloc)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_tengine::Rectangle_<ContainerAllocator>  _boundingbox_type;
  _boundingbox_type boundingbox;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::ros_tengine::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_tengine::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::ros_tengine::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::ros_tengine::Object > ObjectPtr;
typedef boost::shared_ptr< ::ros_tengine::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_tengine::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_tengine::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_tengine::Object_<ContainerAllocator1> & lhs, const ::ros_tengine::Object_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.boundingbox == rhs.boundingbox &&
    lhs.label == rhs.label &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_tengine::Object_<ContainerAllocator1> & lhs, const ::ros_tengine::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_tengine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_tengine::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tengine::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tengine::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tengine::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tengine::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tengine::Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_tengine::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe7a643bb189a90d07f198c3564fcece";
  }

  static const char* value(const ::ros_tengine::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe7a643bb189a90dULL;
  static const uint64_t static_value2 = 0x07f198c3564fceceULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_tengine::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_tengine/Object";
  }

  static const char* value(const ::ros_tengine::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_tengine::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Face bounding box with marker positions\n"
"Header header\n"
"Rectangle boundingbox\n"
"string label\n"
"float32 probability\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_tengine/Rectangle\n"
"# openCV style rectangle with size and 2D position\n"
"Vector2D position\n"
"Vector2D size\n"
"\n"
"================================================================================\n"
"MSG: ros_tengine/Vector2D\n"
"# simple 2D vector\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::ros_tengine::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_tengine::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.boundingbox);
      stream.next(m.label);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_tengine::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_tengine::Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "boundingbox: ";
    s << std::endl;
    Printer< ::ros_tengine::Rectangle_<ContainerAllocator> >::stream(s, indent + "  ", v.boundingbox);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TENGINE_MESSAGE_OBJECT_H
