// Generated by gencpp from file ros_tengine/Rectangle.msg
// DO NOT EDIT!


#ifndef ROS_TENGINE_MESSAGE_RECTANGLE_H
#define ROS_TENGINE_MESSAGE_RECTANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_tengine/Vector2D.h>
#include <ros_tengine/Vector2D.h>

namespace ros_tengine
{
template <class ContainerAllocator>
struct Rectangle_
{
  typedef Rectangle_<ContainerAllocator> Type;

  Rectangle_()
    : position()
    , size()  {
    }
  Rectangle_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , size(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_tengine::Vector2D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ros_tengine::Vector2D_<ContainerAllocator>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::ros_tengine::Rectangle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_tengine::Rectangle_<ContainerAllocator> const> ConstPtr;

}; // struct Rectangle_

typedef ::ros_tengine::Rectangle_<std::allocator<void> > Rectangle;

typedef boost::shared_ptr< ::ros_tengine::Rectangle > RectanglePtr;
typedef boost::shared_ptr< ::ros_tengine::Rectangle const> RectangleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_tengine::Rectangle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_tengine::Rectangle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_tengine::Rectangle_<ContainerAllocator1> & lhs, const ::ros_tengine::Rectangle_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_tengine::Rectangle_<ContainerAllocator1> & lhs, const ::ros_tengine::Rectangle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_tengine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_tengine::Rectangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tengine::Rectangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tengine::Rectangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tengine::Rectangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tengine::Rectangle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tengine::Rectangle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_tengine::Rectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c203b85004c7420de46fab775f4b516b";
  }

  static const char* value(const ::ros_tengine::Rectangle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc203b85004c7420dULL;
  static const uint64_t static_value2 = 0xe46fab775f4b516bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_tengine::Rectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_tengine/Rectangle";
  }

  static const char* value(const ::ros_tengine::Rectangle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_tengine::Rectangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# openCV style rectangle with size and 2D position\n"
"Vector2D position\n"
"Vector2D size\n"
"\n"
"================================================================================\n"
"MSG: ros_tengine/Vector2D\n"
"# simple 2D vector\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::ros_tengine::Rectangle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_tengine::Rectangle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rectangle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_tengine::Rectangle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_tengine::Rectangle_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_tengine::Vector2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::ros_tengine::Vector2D_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TENGINE_MESSAGE_RECTANGLE_H
